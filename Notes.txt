What is Javascript?
* JS is a light-weight, cross-platform, object-oriented programming language.
* JS is one of the 3 core technologies of web development.

Course Outline 
* JS Basics
  * Variables are used to store some data for later use. In other words, think of them as containers which hold whateve data you put inside them.
  * Operators are symbols used to perform some actions on variables.
  * Expression is a line of code which contains a valid combination of variables, values and Operators.
  * Data type tells JS what type of value we have stored in our variables.

* JS Variables
   * Camel Case
   * Pascal Case
   * Snake Case
* In-built Number functions
   * toString() : number as input and returns a string.
   * parseInt() : takes string numeral as input and returns a number.(This will return only integer number whole number not float)
   * parseFloat() : takes string numeral as input and returns a floating number.
   * toFixed() : takes a floating number and rounds it off to given position.

* In-built String functions
 * .length : returns the length of the string
 * indexOf() : Find indexOf a string inside another string
 * lastIndexOf() : find Last index of a string inside another string 
 * slice(start, end) : get a part of our string.
 * substr(startPos, length) : get sub string function
 * toUpperCase() : It converts our string -> toUpperCase characters.
 * toLowerCase() : It converts our string - > lowerCase
 * concat() : It merges two or more strings.(we can also use "+" to concat strings)
 * trim() : It removes extra spaces.
 * charAt() : It takes a position as an arg and returns the character at that position.
 * split() : it splits our string on the basis of the arguments passed.(gives array of elemnents)

Type coercion Implicit 
this converts the string number to number (+"2")
Explicit type coercion is conversion of datatype by programme()

* Objects and arrays
* Functions in JS
* Scope and environment
  * The scope defines the part of the program where a variable or a function is visible /accessible. 
  * The variable defined outside all the functions and blocks are available throughout the code. These are call global variables.
  * The variables defined inside the functions or blocks are local variables and are only availbale in that function or block of code. These variable are call Local variables.

* Variable Hoisting
  * The mechanism where variables and functions can be used before declaring them is called Hoisting in JS.
* Function Hoisting

* DOM & BOM
 * DOM
  * When a web page is loaded, the browser creates a DOM of the page. It is the tree representation of the HTML document. this DOM tree can be modified with teh help of JS.
   + Methods to select HTML elemnents
    * getElementByID
    * getElementByClassName
    * getElementByTagName
   + Query Selectors
    - Query Selectors allow you to use CSS selectors to select HTML elemnents. It is the new way in JS to select HTML elements.
    * querySelector()
    * querySelectorAll()
  * Update HTML elements
  * Updating Styles
    * Store the element in a variable and catch hold the style by the method variableName.style.{ propertyName }= value
  
  * * Event Handling
    When some action happens in the webpage, that action is called event.
    for example :
     * The user clicking the mouse over a certain element.
     * The user hovering the cursor over a certain element. 
     * The user pressing a key on the keyboard.
     * The user resizing or closing the browser window.
     * A web page finishing loading
     * A form being submitted.
     * A video being played, or paused, or finishing play.
  *  BOM (Browser Object Model)
   * BOM represents the current browser window. The main purpose of BOM is to manipulate the properties and methdos which are associated with the browser window.
   * The window object also gives us access to some methods like 
     - setTimeout()
     - setInterval()
     - alert()
     - confirm()
     - prompt()
     - open()
     - close()
  * Regular expressions
    * A regular expression is an object that describes a pattern of characters. It allows us to search for specific patterns of text using the defined patterns.

* OOPs in JS
 * "this" keyword
  * In JS this keyword refers to the current context. The this object always refers to a single object and it is usually used inside a function or a method to access properties and methods which are a part of the object which is associated with the function.
 * Constructor Functions 
 * Inheritance

* HTTP Requests
  * HTTP stands for Hypertext Transfer Protocol. The requests to backend are sent using HTTP. It is a protocol which allows the fetching of data from the server. It is the foundation of any data exchange on the web.
  * Clients and servers communicate by exchanging individual messages. The messages sent by the client are called requests. The messages sent by theserver as an answer are called responses.

* AJAX & JSON
 * JSON stands for JS object Notation
 * It is basically a text format that makes it easy to share data between Clients and Servers. It is origin is based on how JS object works so that's why it looks like a JS Object.

* AJAX stands for Asynchronous JS and XML. It allows web pages to be updated asynchronously by exchanging data with the backend. This makes it possible to update parts of a web page, without reloading the whole page.
* Initially AJAX was used to send and recieve XML because that was how the data was recived from the backend in old days. But now it can also be used to send/receive JSON objects, which is pretty common these days.



* Error Handling
* JQuery
* ES6
  * These are some of the ES6 features:
    * Variable creation using "let" and "const"
    * Template strings
    * Arrow Functions
    * Rest and Spread Operators
     * Spread syntax allows arrays and objects to be expanded into: 
       - elemts in case of array.
       - key-value pairs in case of object.
    * Destructuring
      * It allows us to unpack array or objects into a bunch of variables which makes working with arrays and objects a bit more convenient.
      Syntax: let [a,b] = [1,2,3,4]
      let {name, age} = { firstName: "john", lastname:"Wick"}
    * Array functions: map(),reduce(),find() and findIndex()
      * reduce() : Just like map() reduce also iterates through the entire array and it accepts a callback functon to perform some action on the array element. 
        The difference here is that reduce passes the result of the callback from one iteration to the next one. This callback result is called accumulator.
        The accumulator can be pretty much anything ( integer, string, object or even an array) and must be instantiated and passes when calling reduce.
    * Classes
      * Inheritance
        keyword extend to inherit in ES6 
    * Promises
      * In jS the code is executed line-by-line in a sequence so when we run a parallel operation or asynchronous operation like fetching data from backend, JS doesn't waits for the response it simply executes the next line of code. We give the asynchronous operation a function to call when it is completed. This function is called a callback function.
      * A promise is used to handle the asynchronous result of an operation. It defers the execution of a code block until an synchronous request is completed. This way, other operations can keep running without interruption. 